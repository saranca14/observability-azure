apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - image: amd64/postgres
        name: postgres
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: db-data
      volumes:
      - name: db-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: db
  name: db
spec:
  type: ClusterIP
  ports:
  - name: "db-service"
    port: 5432
    targetPort: 5432
  selector:
    app: db
  apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: redis:alpine
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - mountPath: /data
          name: redis-data
      volumes:
      - name: redis-data
        emptyDir: {} 

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
spec:
  type: ClusterIP
  ports:
  - name: "redis-service"
    port: 6379
    targetPort: 6379
  selector:
    app: redis
  

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: result
  name: result
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result
  template:
    metadata:
      labels:
        app: result
    spec:
      containers:
        - image: saranrnair/election-result:v2
          name: result
          ports:
            - containerPort: 80
              name: result
      imagePullSecrets:
        - name: dockerhub

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: result
  name: result
spec:
  # type: NodePort
  type: LoadBalancer
  ports:
  - name: "result-service"
    port: 8081
    targetPort: 80
    # nodePort: 31001
  selector:
    app: result
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vote
  name: vote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote
  template:
    metadata:
      labels:
        app: vote
    spec:
      containers:
        - image: saranrnair/election-vote:stableV1
          name: vote
          ports:
            - containerPort: 80
              name: vote
      imagePullSecrets:
        - name: dockerhub

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vote
  name: vote
spec:
  # type: NodePort
  type: LoadBalancer
  ports:
    - name: "vote-service"
      port: 8080
      targetPort: 80
      # nodePort: 31000
  selector:
    app: vote
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: worker
  name: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      imagePullSecrets:
        - name: dockerhub
      containers:
        - image: saranrnair/election-worker:v16
          name: worker
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: default
data:
  config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    exporters:
      debug:
        verbosity: detailed

      zipkin/nontls:
        endpoint: "http://zipkin.default.svc.cluster.local:9411/api/v2/spans"
        format: proto
        default_service_name: voting-app

      azuremonitor:
        connection_string: "InstrumentationKey=5c0cba60-882e-4d31-8d60-134e754e8870;IngestionEndpoint=https://ingestion.azuremonitor.com/"

    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [zipkin/nontls, debug]
        metrics:
          receivers: [otlp]
          exporters: [azuremonitor, debug]
        logs:
          receivers: [otlp]
          exporters: [debug]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-all-in-one
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger-all-in-one
  template:
    metadata:
      labels:
        app: jaeger-all-in-one
    spec:
      containers:
        - name: jaeger
          image: jaegertracing/all-in-one:1.35
          ports:
            - containerPort: 5775  # Thrift Compact
            - containerPort: 5776  # Thrift Binary
            - containerPort: 5778  # HTTP Thrift
            - containerPort: 14250 # GRPC (Jaeger collector)
            - containerPort: 14267 # Jaeger HTTP API
            - containerPort: 14268 # Jaeger HTTP UI
            - containerPort: 6831  # UDP (Jaeger Tracing)
            - containerPort: 6832  # UDP (Jaeger Tracing)
            - containerPort: 16686 # Jaeger Query UI
            - containerPort: 9411  # Zipkin HTTP
          env:
            - name: COLLECTOR_ZIPKIN_HTTP_HTTP_PORT
              value: "9411"
            - name: STORAGE_TYPE
              value: "memory"  # Using in-memory storage for simplicity
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-all-in-one
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - name: grpc
      port: 5775
      targetPort: 5775
    - name: compact
      port: 5776
      targetPort: 5776
    - name: thrift-http
      port: 5778
      targetPort: 5778
    - name: jaeger-collector
      port: 14250
      targetPort: 14250
    - name: jaeger-query
      port: 16686
      targetPort: 16686
    - name: jaeger-tracing
      port: 6831
      targetPort: 6831
    - name: jaeger-tracing-udp
      port: 6832
      targetPort: 6832
    - name: zipkin
      port: 9411
      targetPort: 9411
  selector:
    app: jaeger-all-in-one

apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
        - name: otel-collector
          image: otel/opentelemetry-collector-contrib:latest
          volumeMounts:
            - name: config-volume
              mountPath: /etc/otelcol-contrib/

      volumes:
        - name: config-volume
          configMap:
            name: otel-collector-config

---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: default
spec:
  ports:
    - name: grpc
      port: 4317
      targetPort: 4317
    - name: http
      port: 4318
      targetPort: 4318
  selector:
    app: otel-collector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      labels:
        app: zipkin
    spec:
      containers:
        - name: zipkin
          image: openzipkin/zipkin:2.23
          ports:
            - containerPort: 9411

---
apiVersion: v1
kind: Service
metadata:
  name: zipkin
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 9411
      targetPort: 9411
  selector:
    app: zipkin

# --- services.yaml ---
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  # namespace: default
spec:
  selector:
    app: frontend-service
  ports:
    - protocol: TCP
      port: 80 # Expose on port 80
      targetPort: 8080
  type: LoadBalancer # Use LoadBalancer for external access

---
apiVersion: v1
kind: Service
metadata:
  name: orders-service
  # namespace: default
spec:
  selector:
    app: orders-service
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

---
apiVersion: v1
kind: Service
metadata:
  name: products-service
  # namespace: default
spec:
  selector:
    app: products-service
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001

---
apiVersion: v1
kind: Service
metadata:
  name: recommendations-service
  # namespace: default
spec:
  selector:
    app: recommendations-service
  ports:
    - protocol: TCP
      port: 5002
      targetPort: 5002
---
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  # namespace: default
spec:
  selector:
    app: payment-service
  ports:
    - protocol: TCP
      port: 5003
      targetPort: 5003

# --- otel-collector.yaml ---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  # namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
        - name: otel-collector
          image: otel/opentelemetry-collector-contrib:latest # Use the contrib image
          imagePullPolicy: IfNotPresent
          command:
            - "/otelcol-contrib"
            - "--config=/conf/otel-collector-config.yaml"
          volumeMounts:
            - name: otel-collector-config-vol
              mountPath: /conf
          ports:
            - containerPort: 4317 # OTLP gRPC
            - containerPort: 4318 # OTLP HTTP
            - containerPort: 8889 # Prometheus metrics
      volumes:
        - name: otel-collector-config-vol
          configMap:
            name: otel-collector-config
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  # namespace: default
spec:
  selector:
    app: otel-collector
  ports:
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
    - name: otlp-http
      port: 4318
      targetPort: 4318
    - name: prometheus
      port: 8889
      targetPort: 8889
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  # namespace: default
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:

    processors:
      batch:
        send_batch_size: 1000
        timeout: 10s

    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"
        send_timestamps: true
        namespace: "opentelemetry"
      zipkin:
        endpoint: "zipkin.default.svc.cluster.local:9411/api/v2/spans" # Use full DNS, default namespace
        format: proto

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [zipkin]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus]


# --- zipkin.yaml ---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin
  # namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      labels:
        app: zipkin
    spec:
      containers:
        - name: zipkin
          image: openzipkin/zipkin:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9411
---
apiVersion: v1
kind: Service
metadata:
  name: zipkin
  # namespace: default
spec:
  selector:
    app: zipkin
  ports:
    - protocol: TCP
      port: 9411
      targetPort: 9411

# --- prometheus.yaml ---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  # namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus
          ports:
            - containerPort: 9090
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  # namespace: default
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
  type: LoadBalancer # Adjust for your AKS setup.  Consider NodePort or ClusterIP + Ingress.

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  # namespace: default
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'opentelemetry'
        static_configs:
          - targets: ['otel-collector.default.svc.cluster.local:8889']

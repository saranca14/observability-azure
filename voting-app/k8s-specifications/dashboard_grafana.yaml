apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        # - name: grafana-datasources # Uncomment this if using configmap
        #   mountPath: /etc/grafana/provisioning/datasources
        readinessProbe:  # Add readiness and liveness probes
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          timeoutSeconds: 30
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      # - name: grafana-datasources  # Uncomment if using configmap
      #   configMap:
      #       name: grafana-datasources-config


---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default  # Change to your desired namespace
spec:
  selector:
    app: grafana
  ports:
    - name: http
      port: 3000
      targetPort: http  # Use the named port from the Deployment
  type: LoadBalancer  # Use ClusterIP for internal access